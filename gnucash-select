#!/usr/bin/env python3
'GnuCash File Selector'
from __future__ import annotations

import argparse
import os
import re
import shlex
import subprocess
import sys
import tkinter as tk
import tkinter.font as font
from collections import Counter
from pathlib import Path
from tkinter import ttk
from tkinter.filedialog import askdirectory
from typing import Optional, Union

import platformdirs

HEADINGS = ('File', ' Open ', 'Backups', 'Logs')
GCASHPROG = 'gnucash'
GCASHEXT = GCASHPROG
LOCKEXT = 'LCK'
PROG = Path(sys.argv[0]).stem
CNFFILE = platformdirs.user_config_path() / f'{PROG}.conf'

def run_file(srcdir: Path, fname: str) -> Optional[str]:
    'Run Gnucash for given file name'
    fpath = srcdir / (fname + f'.{GCASHEXT}')
    lockfile = fpath.with_name(fpath.name + f'.{LOCKEXT}')
    if lockfile.exists():
        return f'File {fpath} is already open.'
    try:
        subprocess.Popen((GCASHPROG, str(fpath)))
    except Exception as e:
        return str(e)
    return None

def store_dir(cachepath: Path, newdir: Path) -> None:
    'Store the new directory'
    cachepath.parent.mkdir(parents=True, exist_ok=True)
    cachepath.write_text(f'{newdir}\n')

def refresh_files(srcdir: Path) -> list[tuple[str, str, Union[str, int],
                                              Union[str, int]]]:
    'Refresh view of given source dir'
    if not srcdir.exists():
        return [('<invalid dir>', '', '', '')]

    files = set()
    files_open = set()
    files_bkup: dict[str, int] = Counter()
    files_log: dict[str, int] = Counter()

    for p in srcdir.iterdir():
        parts = str(p.name).split('.', maxsplit=4)
        plen = len(parts)
        if not (2 <= plen <= 4) or parts[1] != GCASHEXT:
            continue
        name = parts[0]
        if plen == 2:
            files.add(name)
            continue
        if plen == 3:
            if parts[2] == LOCKEXT:
                files_open.add(name)
            continue
        dateval, ext = parts[2:]
        if len(dateval) != 14 or not dateval.isdigit():
            continue
        if ext == 'log':
            files_log[name] += 1
        elif ext == GCASHEXT:
            files_bkup[name] += 1

    if not files:
        return [('<empty dir>', '', '', '')]

    return [(f, 'Open' if f in files_open else '', files_bkup[f],
        files_log[f]) for f in sorted(files)]

class UI:
    'Class to manage the display'
    def __init__(self, root, args):
        root.title(__doc__)
        root.resizable(False, False)
        font.nametofont("TkDefaultFont").configure(size=args.font_size)
        font.nametofont("TkFixedFont").configure(size=args.font_size)

        self.period = 1000 * args.period
        self.cachepath = platformdirs.user_cache_path() / PROG
        self.srcdir = Path(self.cachepath.read_text().strip()) \
                if self.cachepath.is_file() else Path.home()

        # Set GTK theme for when we start GnuCash
        if args.gtk_theme:
            os.environ['GTK_THEME'] = args.gtk_theme

        mf = ttk.Frame(root, padding="8 8 10 10")
        mf.grid(column=0, row=0, sticky='nsew')
        root.columnconfigure(0, weight=1)
        root.rowconfigure(0, weight=1)
        self.root = root

        # Use label to display directory name
        self.dirname = ttk.Label(mf, text=str(self.srcdir), borderwidth=4,
                               padding=4, relief='groove')
        self.dirname.grid(column=0, row=0, columnspan=2, sticky='we')

        # Use Treeview to display list of files
        self.filelist = ttk.Treeview(mf, columns=HEADINGS, height=args.rows,
                                  selectmode='browse', show='headings')
        for ix, h in enumerate(HEADINGS):
            self.filelist.heading(h, text=h)
            if ix > 0:
                self.filelist.column(h, width=((len(h) + 2) * args.font_size))

        self.filelist.grid(column=0, row=1, columnspan=2, sticky='we')

        self.filelist.bind('<<TreeviewSelect>>', self.select_file)

        scroll = ttk.Scrollbar(mf, orient='vertical',
                               command=self.filelist.yview)

        self.filelist.configure(yscroll=scroll.set)
        scroll.grid(column=2, row=1, sticky='nsw')

        # Add buttons
        ttk.Button(mf, text='Directory',
                   command=self.select_dir).grid(column=0, row=2)
        ttk.Button(mf, text='Exit', command=root.quit).grid(column=1, row=2)

        # Add padding for all widgets
        for child in mf.winfo_children():
            child.grid_configure(padx=4, pady=4)

        self.filedata = []
        self.refresh_ui()

    def refresh_ui(self):
        'Refresh and redisplay the directory of files'
        filedata = refresh_files(self.srcdir)
        if self.filedata != filedata:
            self.filedata = filedata
            self.filelist.delete(*self.filelist.get_children())
            for line in filedata:
                self.filelist.insert('', 'end', values=line)

        self.refresh_ui_id = self.root.after(self.period, self.refresh_ui)

    def select_file(self, event):
        'Select a file to open'
        select = self.filelist.selection()
        if not select:
            return

        tindex = self.filelist.index(select[0])
        filestem = self.filedata[tindex][0]
        errmsg = run_file(self.srcdir, filestem) \
                if filestem[0] != '<' else 'No files to open'
        if errmsg:
            tk.messagebox.showerror(f'{__doc__} Error', errmsg)

    def select_dir(self):
        'Select a new base directory'
        adir = askdirectory(initialdir=self.srcdir, mustexist=True)
        if adir:
            apath = Path(adir)
            if apath != self.srcdir:
                self.srcdir = apath
                store_dir(self.cachepath, apath)
                self.dirname.configure(text=adir)
                self.root.after_cancel(self.refresh_ui_id)
                self.refresh_ui()

if __name__ == '__main__':
    # Process command line options
    opt = argparse.ArgumentParser(description=__doc__.strip(),
            epilog='Note you can set default starting options in '
            f'{CNFFILE}.')
    opt.add_argument('-p', '--period', type=int, default=1,
            help='period in seconds at which to check directory, '
                     'default = %(default)d')
    opt.add_argument('-r', '--rows', type=int, default=6,
            help='number of file rows displayed in table, '
                     'default = %(default)d')
    opt.add_argument('-g', '--gtk-theme',
            help=f'GTK theme to use running {GCASHPROG}, e.g. "Adwaita:light"')
    opt.add_argument('-f', '--font-size', type=int, default=10,
            help='default font size, default=%(default)d')

    # Merge in default args from user config file. Then parse the
    # command line.
    cnffile = CNFFILE.expanduser()
    if cnffile.exists():
        with cnffile.open() as fp:
            lines = [re.sub(r'#.*$', '', line).strip() for line in fp]
        cnflines = ' '.join(lines).strip()
    else:
        cnflines = ''

    args = opt.parse_args(shlex.split(cnflines) + sys.argv[1:])

    root = tk.Tk()
    UI(root, args)
    root.mainloop()
