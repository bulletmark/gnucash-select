#!/usr/bin/env python3
'GnuCash File Selector.'
import os
import sys
import time
import argparse
import subprocess
import shlex
from collections import Counter
from pathlib import Path
import PySimpleGUI as sg

HEADINGS = ('File', ' Open ', 'Backups', 'Logs')
GCASHPROG = 'gnucash'
GCASHEXT = GCASHPROG
LOCKEXT = 'LCK'
PROG = Path(sys.argv[0]).stem
CNFFILE = f'~/.config/{PROG}-flags.conf'

def run_file(workdir: Path, fname: str):
    'Run Gnucash for given file name'
    fpath = workdir / (fname + f'.{GCASHEXT}')
    lockfile = fpath.with_name(fpath.name + f'.{LOCKEXT}')
    if lockfile.exists():
        return False, None
    try:
        subprocess.Popen((GCASHPROG, str(fpath)))
    except Exception as e:
        return False, str(e)
    return True, None

def store_dir(cachepath: Path, newdir: Path):
    'Store the new directory'
    cachepath.parent.mkdir(parents=True, exist_ok=True)
    cachepath.write_text(f'{newdir}\n')

def refresh(workdir: Path):
    'Refresh view of given source dir'
    if not workdir.exists():
        return [('<invalid dir>', '', '', '')]

    files = set()
    files_open = set()
    files_bkup = Counter()
    files_log = Counter()

    for p in workdir.iterdir():
        parts = str(p.name).split('.', maxsplit=4)
        plen = len(parts)
        if not (2 <= plen <= 4) or parts[1] != GCASHEXT:
            continue
        name = parts[0]
        if plen == 2:
            files.add(name)
            continue
        if plen == 3:
            if parts[2] == LOCKEXT:
                files_open.add(name)
            continue
        dateval, ext = parts[2:]
        if len(dateval) != 14 or not dateval.isdigit():
            continue
        if ext == 'log':
            files_log[name] += 1
        elif ext == GCASHEXT:
            files_bkup[name] += 1

    if not files:
        return [('<empty dir>', '', '', '')]

    return [(f, 'Open' if f in files_open else '', files_bkup[f],
        files_log[f]) for f in sorted(files)]

if __name__ == '__main__':
    # Process command line options
    opt = argparse.ArgumentParser(description=__doc__.strip(),
            epilog='Note you can set default starting arguments in '
            f'{CNFFILE}.')
    opt.add_argument('-p', '--period', type=float, default=1,
            help='period in seconds at which to check directory. '
            'Default = %(default)d.')
    opt.add_argument('-f', '--flashtime', type=float, default=1,
            help='time in seconds to flash after clicking. '
            'Default = %(default)d.')
    opt.add_argument('-r', '--rows', type=int, default=6,
            help='number of file rows in table. Default = %(default)d.')
    opt.add_argument('-t', '--theme',
            help='pysimplegui theme to use [pass "preview" to see options]')
    opt.add_argument('-g', '--gtk-theme',
            help=f'GTK theme to use running {GCASHPROG}, e.g. "Adwaita:light"')
    opt.add_argument('-w', '--widthdir', type=int, default=40,
            help='char width of dir field. Default = %(default)d.')
    opt.add_argument('--row-color', default='#4b586e',
            help='table row color. Default=%(default)s')
    opt.add_argument('--row-color-ok', default='green',
            help='table row color when selected ok. Default=%(default)s')
    opt.add_argument('--row-color-bad', default='red',
            help='table row color when not selected ok. Default=%(default)s')

    # Merge in default args from user config file. Then parse the
    # command line.
    cnffile = Path(CNFFILE).expanduser()
    cnfargs = shlex.split(cnffile.read_text().strip()) \
            if cnffile.exists() else []
    args = opt.parse_args(cnfargs + sys.argv[1:])

    period = 1000 * args.period
    cachepath = Path(os.getenv('XDG_CACHE_HOME',
        f'~{os.sep}.cache')).expanduser() / PROG
    workdir = Path(cachepath.read_text().strip()) \
            if cachepath.exists() else Path.home()

    # Set GTK theme for when we start GnuCash
    if args.gtk_theme:
        os.environ['GTK_THEME'] = args.gtk_theme

    # Get starting file data
    filedata = refresh(workdir)

    # Set theme if specified, or view all options
    if args.theme:
        if args.theme == 'preview':
            sg.theme_previewer()
            sys.exit()
        sg.theme(args.theme)

    # Build the PySimpleGUI layout
    layout = [
        [sg.Input(str(workdir), key='-dir-', size=(args.widthdir, 1),
            enable_events=True, readonly=True,
            tooltip='Directory where GnuCash files live')],
        [sg.Table(filedata, key='-values-', headings=HEADINGS,
            background_color=args.row_color,
            num_rows=args.rows, max_col_width=40, enable_events=True)],
        [sg.FolderBrowse('Directory', target='-dir-',
            tooltip='Select new directory'), sg.Exit()],
    ]

    window = sg.Window(__doc__.rstrip('.'), layout, finalize=True)
    data_vals = window['-values-']
    for col in (1, 2):
        data_vals.Widget.column(f'#{col}', anchor='w')

    # Forever ..
    row_colors_e = {}
    while True:
        event, values = window.read(timeout=period)
        if event in (sg.WIN_CLOSED, 'Exit'):
            break

        now = time.monotonic()
        if event == '-dir-':
            workdir = Path(values[event])
            store_dir(cachepath, workdir)
            row_colors_e = {}
        elif event == '-values-':
            val = values[event]
            if val:
                index = val[0]
                ok, errmsg = run_file(workdir, filedata[index][0])
                if ok:
                    color = args.row_color_ok
                else:
                    color = args.row_color_bad
                    if errmsg:
                        sg.popup_error(errmsg, title='Open Error',
                                modal=True, keep_on_top=True)

                row_colors_e[index] = ((now + args.flashtime), color)

        # Refresh table column data each time
        filedata = refresh(workdir)

        # Flush any old/expired flash colors
        row_colors_e = {k: v for k, v in row_colors_e.items() if v[0] > now}

        # Build list of color tuples for each row. Pysimplegui has a bug
        # where row #0 will not reset. The following should work but
        # instead we have to set all rows each time to work around bug.
        # row_colors = [(k, v[1]) for k, v in row_colors_e.items()]
        row_colors = [(k, row_colors_e.get(k, (None, args.row_color))[1]) for k
                in range(len(filedata))]

        # Update the displayed table
        data_vals.update(filedata, row_colors=row_colors)

    window.close()
